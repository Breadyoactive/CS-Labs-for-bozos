import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;
import java.util.Stack;

public class PostFixRunner
{
    private Stack<Double> stack;

    public PostFixRunner()
    {
        stack = new Stack<Double>(); //creates stack
    }

    public static void main(String[] args) throws FileNotFoundException {
        String expression, again;
        double result;

        Scanner keyboard = new Scanner(new File("PostFix.txt"));

        do
        {
            PostFixRunner evaluator = new PostFixRunner();
            expression = keyboard.nextLine();
            result = evaluator.evaluate(expression);
            System.out.println(expression + " = " + result);
        }
        while (keyboard.hasNext());
    }

    public double evaluate(String expr)
    {
        double op1, op2, result = 0;
        String token;
        Scanner parser = new Scanner(expr);

        while (parser.hasNext())
        {
            token = parser.next();

            if (isOperator(token))  //if operator pop
            {
                op2 = (stack.pop()).doubleValue();
                op1 = (stack.pop()).doubleValue();
                result = evaluateSingleOperator(token.charAt(0), op1, op2);     //
                stack.push(new Double(result));
            }
            else
                stack.push(new Double(Double.parseDouble(token)));
        }

        return result;
    }

    private boolean isOperator(String token)
    {
        return ( token.equals("+") || token.equals("-") ||
                token.equals("*") || token.equals("/") || token.equals("%") );

    }

    private double evaluateSingleOperator(char operation, double op1, double op2)
    {
        double result = 0;

        switch (operation)
        {
            case '+':
                result = op1 + op2;
                break;
            case '-':
                result = op1 - op2;
                break;
            case '*':
                result = op1 * op2;
                break;
            case '/':
                result = op1 / op2;
                break;
            case '%':
                result = op1 % op2;
                break;
        }

        return result;
    }

}